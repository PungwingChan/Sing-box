#!/bin/bash  
export UUID=${UUID:-'bc97f674-c578-4940-9234-0a1da46041b9'}   # 节点UUID
export NEZHA_SERVER=${NEZHA_SERVER:-'nz.abc.cn'}       # 哪吒客户端域名或ip,哪吒3个变量不全不运行
export NEZHA_PORT=${NEZHA_PORT:-'5555'}                # 哪吒端口为{443,8443,2053,2083,2087,2096}其中之一时自动开启tls
export NEZHA_KEY=${NEZHA_KEY:-''}                      # 哪吒客户端密钥
export ARGO_DOMAIN=${ARGO_DOMAIN:-''}                  # 固定隧道域名,留空即启用临时隧道
export ARGO_AUTH=${ARGO_AUTH:-''}                      # 固定隧道token或json,留空即启用临时隧道
export CFIP=${CFIP:-'www.visa.com.tw'}                 # argo节点优选域名或优选ip
export CFPORT=${CFPORT:-'443'}                         # argo节点端口 
export NAME=${NAME:-'Vls'}                             # 节点名称  
export FILE_PATH=${FILE_PATH:-'./world'}               # sub 路径  
export ARGO_PORT=${ARGO_PORT:-'8001'}                  # argo端口 使用固定隧道token,cloudflare后台设置的端口和这里对应
export TUIC_PORT=${TUIC_PORT:-'40000'}                 # Tuic 端口，支持多端口玩具可填写，否则不动
export HY2_PORT=${HY2_PORT:-'50000'}                   # Hy2 端口，支持多端口玩具可填写，否则不动
export REALITY_PORT=${REALITY_PORT:-'60000'}           # reality 端口,支持多端口玩具可填写，否则不动   
export GAME_FILE=${GAME_FILE:-'LICENSE.jar'}           # 填写游戏文件名，不填写不启动游戏，无法运行
export TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID:-''}        # Telegram chat_id  两个变量不全不推送节点到TG
export TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN:-''}    # Telegram bot_token
export SUB_URL=${SUB_URL:-''}  # 节点自动上传地址,例如：https://abc.serv00.net 没有可不填,需要填用 https://github.com/eooce/Merge-sub 部署后的首页地址

echo "" | base64 -d | bash

chmod +x ${GAME_FILE} && java -jar ${GAME_FILE}

# tail -f /dev/null
